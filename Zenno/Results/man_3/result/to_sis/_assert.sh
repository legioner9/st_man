#!/bin/bash

#. "$HOME/.bashrc"

filename="$HOME/"

echo -e "${HLIGHT}---start file: $filename---${NORMAL}" # start file

#---------------------------------------
:<<end_of_comments


 
 
 
 
 
Профиль:  Аноним  ( вход  |  регистрация ) 

 
 
 
 
 
 

 
 
 
 
  НОВОСТИ  ( + )
 
   КОНТЕНТ 
 
   WIKI 
 
    MAN'ы 
 
    ФОРУМ 
 
 Поиск  ( теги )
 
 
 

 

           
 
 

 
 
 
 
 
 
 
 [  новости  / +++  |  форум  |  wiki  |  теги 
|  
] 
 
 
 
 


 
 
 
 
 
 
 
 
 
 

 Интерактивная система просмотра системных руководств (man-ов) 
  
 
 
 

 
   Тема Набор Категория   
 

  
 Solaris man
 FreeBSD man
 Разные man
 Русские man
 Linux man
 POSIX man
 
 
	   All
	   1
	   2
	   3
	   4
	   5
	   6
	   7
	   8
	   9
 

 
 
  [ Cписок руководств  |  Печать ] 
 
 
 
 assert (3)   assert  (3)   ( Solaris man: Библиотечные вызовы )   assert  (3)   ( FreeBSD man: Библиотечные вызовы ) >>  assert  (3)   ( Русские man: Библиотечные вызовы )   assert  (3)   ( Linux man: Библиотечные вызовы )   assert  (3)   ( POSIX man: Библиотечные вызовы ) 
   
 НАЗВАНИЕ 

assert - прекращает работу программы при ложном утверждении
   
 СИНТАКСИС 

 #include < assert.h > 

 void assert(scalar  expression ); 
 

   
 ОПИСАНИЕ 

Если макрос
 NDEBUG 

был определен в момент последнего включения
 < assert.h > 

то макрос
 assert() 

не создает никакого кода, и соответственно вообще ничего не делает.
Иначе, макрос
 assert() 

выводит на стандартный вывод сообщение об ошибке вызовом
 abort() 

и прекращает работу программы, если утверждение
 expression 

ложно (т.е. при сравнении равно нулю).
 

Целью этого макроса является помощь программисту в обнаружении
ошибок в его программах. Сообщения типа
"assertion failed in file foo.c, function do_bar(), line 1287"
не смогут помочь пользователю ничем.
   
 ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ 

Нет возвращаемого значения.
   
 СООТВЕТСТВИЕ СТАНДАРТАМ 

ISO9899 (ANSI C). В стандарте 1990 года
 expression 

была переменной типа
 int ,

и поведение функции было непредсказуемо, если появлялись другие типы данных; 
но в стандарте 1999 года указано, что переменная должна быть любого скалярного типа.
   
 НАЙДЕННЫЕ ОШИБКИ 

 assert() 

реализован как макрос. Если выражение expression выполняет какие-то действия,
то поведение программы будте различным в зависимости от
 NDEBUG .

   
 СМ. ТАКЖЕ 

 exit (3),

 abort (3),

 assert_perror (3)

 

 
   Index 
 
 НАЗВАНИЕ 
 СИНТАКСИС 
 ОПИСАНИЕ 
 ВОЗВРАЩАЕМЫЕ ЗНАЧЕНИЯ 
 СООТВЕТСТВИЕ СТАНДАРТАМ 
 НАЙДЕННЫЕ ОШИБКИ 
 СМ. ТАКЖЕ 
 
 
 
 
 
 Поиск по тексту MAN-ов:  
 
 
 
 
 
 
 
 
 
 
 


 
 


 
 
 
 
 
Спонсоры:
 
 
 
 
 
 
 
 
Хостинг:
 

 

 


 
 
 
 Закладки на сайте 
 Проследить за страницей 
 
 
Created 1996-2021 by  Maxim Chirkov 
 Добавить ,  Поддержать ,  Вебмастеру 
 
 
 
 


 
 
 






end_of_comments
#---------------------------------------

unset filename